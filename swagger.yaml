openapi: 3.0.3
info:
  title: CrusherMate API
  description: |
    CrusherMate Backend API - Comprehensive documentation for all available endpoints.

    Authentication: Use a Bearer JWT in the Authorization header.
    Example: `Authorization: Bearer <token>`
  version: 1.0.0
  contact:
    name: CrusherMate Support
    email: support@crushermate.com
servers:
  - url: http://localhost:3000
    description: Local Development
  - url: https://localhost:3000
    description: Local Development (HTTPS)
  - url: http://127.0.0.1:3000
    description: Local Development (IP)
  - url: https://your-production-domain
    description: Production
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      description: User object (organization will be populated when available)
      properties:
        id: { type: string, description: Convenience identifier alias of _id }
        _id: { type: string }
        username: { type: string }
        role: { type: string, enum: [owner, user] }
        organization:
          oneOf:
            - type: string
              description: Organization ID when not populated
            - $ref: "#/components/schemas/Organization"
          description: Organization reference or populated object
        organizationName:
          type: string
          description: Cached organization name for quick display
        isActive: { type: boolean }
        lastLogin: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      example:
        id: "6891e7637f59e26c132beee4"
        username: "suresh_owner"
        role: "owner"
        organization:
          _id: "6891e7647f59e26c132beeec"
          name: "Suresh Crusher"
          owner: "6891e7637f59e26c132beee4"
          members:
            - "6891e7637f59e26c132beee4"
            - "6891e7657f59e26c132bef04"
          createdAt: "2025-08-05T11:13:40.156Z"
          updatedAt: "2025-08-05T13:04:25.958Z"
        organizationName: "Suresh Crusher"
        lastLogin: "2025-08-09T12:30:57.017Z"
        isActive: true
    UserRegistration:
      type: object
      required: [username, password]
      properties:
        username: { type: string, minLength: 3, maxLength: 15 }
        password: { type: string, minLength: 6 }
        organizationName: { type: string }
        role: { type: string, enum: [owner, user], default: user }
    UserLogin:
      type: object
      required: [username, password]
      properties:
        username: { type: string }
        password: { type: string }
    AuthResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        data:
          type: object
          properties:
            token: { type: string }
            user: { $ref: "#/components/schemas/User" }
    Organization:
      type: object
      properties:
        _id: { type: string }
        name: { type: string }
        owner: { type: string }
        members:
          type: array
          items: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    MaterialRate:
      type: object
      properties:
        _id: { type: string }
        materialType: { type: string }
        currentRate: { type: number }
        previousRate: { type: number }
        effectiveDate: { type: string, format: date-time }
        updatedBy: { type: string }
    TruckEntry:
      type: object
      properties:
        _id: { type: string }
        organization: { type: string }
        userId:
          type: object
          properties:
            _id: { type: string }
            username: { type: string }
        truckNumber: { type: string }
        truckName: { type: string }
        entryType: { type: string, enum: [Sales, Raw Stone] }
        materialType: { type: string }
        units: { type: number }
        ratePerUnit: { type: number }
        totalAmount: { type: number }
        truckImage: { type: string }
        entryDate: { type: string, format: date }
        entryTime: { type: string }
        status: { type: string, enum: [active, deleted] }
        notes: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    TruckEntryCreate:
      type: object
      required:
        [truckNumber, truckName, entryType, units, ratePerUnit, entryDate]
      properties:
        truckNumber: { type: string }
        truckName: { type: string }
        entryType: { type: string, enum: [Sales, Raw Stone] }
        materialType: { type: string }
        units: { type: number }
        ratePerUnit: { type: number }
        entryDate: { type: string, format: date }
        entryTime: { type: string }
        notes: { type: string }
    OtherExpense:
      type: object
      properties:
        _id: { type: string }
        organization: { type: string }
        user: { type: string }
        expensesName: { type: string }
        amount: { type: number }
        others: { type: string }
        notes: { type: string }
        date: { type: string, format: date }
        isActive: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    DashboardSummary:
      type: object
      properties:
        totalSales: { type: number }
        totalRawStone: { type: number }
        totalOtherExpenses: { type: number }
        totalExpenses: { type: number }
        netProfit: { type: number }
        salesCount: { type: integer }
        rawStoneCount: { type: integer }
        otherExpensesCount: { type: integer }
        totalEntries: { type: integer }
    ErrorResponse:
      type: object
      required: [success, message]
      properties:
        success: { type: boolean, example: false }
        message: { type: string }
        error: { type: string }
        code: { type: string, description: "Application specific error code" }
        timestamp: { type: string, format: date-time }
    Pagination:
      type: object
      properties:
        currentPage: { type: integer, example: 1 }
        totalPages: { type: integer, example: 5 }
        totalItems: { type: integer, example: 50 }
        pageSize: { type: integer, example: 10 }
    StandardSuccess:
      type: object
      properties:
        success: { type: boolean, example: true }
        message: { type: string, example: Operation successful }
        timestamp: { type: string, format: date-time }
        data: { type: object }
    AuthSuccessResponse:
      allOf:
        - $ref: "#/components/schemas/StandardSuccess"
        - type: object
          properties:
            data:
              type: object
              properties:
                token: { type: string }
                user: { $ref: "#/components/schemas/User" }
          example:
            success: true
            message: "Login successful"
            timestamp: "2025-08-09T12:30:57.050Z"
            data:
              token: "<jwt-token>"
              user:
                id: "6891e7637f59e26c132beee4"
                username: "suresh_owner"
                role: "owner"
                organization:
                  _id: "6891e7647f59e26c132beeec"
                  name: "Suresh Crusher"
                  owner: "6891e7637f59e26c132beee4"
                  members:
                    - "6891e7637f59e26c132beee4"
                    - "6891e7657f59e26c132bef04"
                  createdAt: "2025-08-05T11:13:40.156Z"
                  updatedAt: "2025-08-05T13:04:25.958Z"
                organizationName: "Suresh Crusher"
                lastLogin: "2025-08-09T12:30:57.017Z"
    UsersListResponse:
      allOf:
        - $ref: "#/components/schemas/StandardSuccess"
        - type: object
          properties:
            data:
              type: object
              properties:
                users:
                  type: array
                  items: { $ref: "#/components/schemas/User" }
                pagination: { $ref: "#/components/schemas/Pagination" }
    TruckEntryListResponse:
      allOf:
        - $ref: "#/components/schemas/StandardSuccess"
        - type: object
          properties:
            data:
              type: object
              properties:
                truckEntries:
                  type: array
                  items: { $ref: "#/components/schemas/TruckEntry" }
                pagination: { $ref: "#/components/schemas/Pagination" }
    TruckEntryDetailResponse:
      allOf:
        - $ref: "#/components/schemas/StandardSuccess"
        - type: object
          properties:
            data:
              type: object
              properties:
                truckEntry: { $ref: "#/components/schemas/TruckEntry" }
    TruckEntryCreateResponse:
      allOf:
        - $ref: "#/components/schemas/TruckEntryDetailResponse"
    MaterialRateListResponse:
      allOf:
        - $ref: "#/components/schemas/StandardSuccess"
        - type: object
          properties:
            data:
              type: object
              properties:
                materialRates:
                  type: array
                  items: { $ref: "#/components/schemas/MaterialRate" }
    OtherExpenseListResponse:
      allOf:
        - $ref: "#/components/schemas/StandardSuccess"
        - type: object
          properties:
            data:
              type: object
              properties:
                expenses:
                  type: array
                  items: { $ref: "#/components/schemas/OtherExpense" }
                pagination: { $ref: "#/components/schemas/Pagination" }
    OtherExpenseDetailResponse:
      allOf:
        - $ref: "#/components/schemas/StandardSuccess"
        - type: object
          properties:
            data:
              type: object
              properties:
                expense: { $ref: "#/components/schemas/OtherExpense" }
    OtherExpenseSummaryResponse:
      allOf:
        - $ref: "#/components/schemas/StandardSuccess"
        - type: object
          properties:
            data:
              type: object
              properties:
                totalAmount: { type: number }
                totalCount: { type: integer }
    ReportTemplatesResponse:
      allOf:
        - $ref: "#/components/schemas/StandardSuccess"
        - type: object
          properties:
            data:
              type: object
              properties:
                templates:
                  type: array
                  items:
                    type: object
                    properties:
                      id: { type: string }
                      name: { type: string }
                      description: { type: string }
                      formats:
                        type: array
                        items: { type: string }
    ReportDataResponse:
      allOf:
        - $ref: "#/components/schemas/StandardSuccess"
        - type: object
          properties:
            data:
              type: object
              properties:
                reportData: { type: object }
    ReportExportTokenResponse:
      allOf:
        - $ref: "#/components/schemas/StandardSuccess"
        - type: object
          properties:
            data:
              type: object
              properties:
                downloadUrl: { type: string }
                fileName: { type: string }
                fileSize: { type: string }
                expiresAt: { type: string, format: date-time }
    ConfigAppResponse:
      allOf:
        - $ref: "#/components/schemas/StandardSuccess"
        - type: object
          properties:
            data:
              type: object
              properties:
                config: { type: object }
    ConfigRatesResponse:
      allOf:
        - $ref: "#/components/schemas/StandardSuccess"
        - type: object
          properties:
            data:
              type: object
              properties:
                rates:
                  type: array
                  items:
                    type: object
                    properties:
                      materialType: { type: string }
                      currentRate: { type: number }
                      lastUpdated: { type: string, format: date-time }
                previewUnits: { type: number }
    ConfigCalculateResponse:
      allOf:
        - $ref: "#/components/schemas/StandardSuccess"
        - type: object
          properties:
            data:
              type: object
              properties:
                calculation:
                  type: object
                  properties:
                    units: { type: number }
                    ratePerUnit: { type: number }
                    totalAmount: { type: number }
                formatted: { type: object }
    ConfigValidateResponse:
      allOf:
        - $ref: "#/components/schemas/StandardSuccess"
        - type: object
          properties:
            data:
              type: object
              properties:
                isValid: { type: boolean }
                errors:
                  type: array
                  items: { type: string }
                warnings:
                  type: array
                  items: { type: string }
                validatedData: { type: object }
    DashboardSummaryResponse:
      allOf:
        - $ref: "#/components/schemas/StandardSuccess"
        - type: object
          properties:
            data: { $ref: "#/components/schemas/DashboardSummary" }
    HealthBasicResponse:
      allOf:
        - $ref: "#/components/schemas/StandardSuccess"
        - type: object
          properties:
            message:
              { type: string, example: "CrusherMate API Server is running!" }
    HealthDetailedResponse:
      allOf:
        - $ref: "#/components/schemas/StandardSuccess"
        - type: object
          properties:
            data:
              type: object
              properties:
                status: { type: string, example: healthy }
                uptime: { type: string }
                database: { type: object }
                environment: { type: string }
                version: { type: string }
    HealthDBResponse:
      allOf:
        - $ref: "#/components/schemas/StandardSuccess"
        - type: object
          properties:
            data:
              type: object
              properties:
                status: { type: string, example: connected }
                database: { type: string }
                host: { type: string }
  responses:
    UnauthorizedError:
      description: Unauthorized - missing or invalid token
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    ForbiddenError:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    ValidationError:
      description: Validation failed
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
paths:
  /health:
    get:
      tags: [Health]
      summary: Basic health check
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/HealthBasicResponse" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /ping:
    get:
      tags: [Health]
      summary: Ping
      responses:
        "200":
          description: Pong
          content:
            application/json:
              schema: { $ref: "#/components/schemas/HealthBasicResponse" }
  /api/health:
    get:
      tags: [Health]
      summary: Detailed health
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/HealthDetailedResponse" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /api/health/db:
    get:
      tags: [Health]
      summary: DB health
      responses:
        "200":
          description: Connected
          content:
            application/json:
              schema: { $ref: "#/components/schemas/HealthDBResponse" }
        "503": { $ref: "#/components/responses/InternalServerError" }
  /api/auth/register:
    post:
      tags: [Authentication]
      summary: Register
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UserRegistration" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthSuccessResponse" }
        "400": { $ref: "#/components/responses/ValidationError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /api/auth/login:
    post:
      tags: [Authentication]
      summary: Login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UserLogin" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthSuccessResponse" }
              examples:
                populatedOrganization:
                  summary: Successful login with populated organization
                  value:
                    success: true
                    message: "Login successful"
                    timestamp: "2025-08-09T12:30:57.050Z"
                    data:
                      token: "<jwt-token>"
                      user:
                        id: "6891e7637f59e26c132beee4"
                        username: "suresh_owner"
                        role: "owner"
                        organization:
                          _id: "6891e7647f59e26c132beeec"
                          name: "Suresh Crusher"
                          owner: "6891e7637f59e26c132beee4"
                          members:
                            - "6891e7637f59e26c132beee4"
                            - "6891e7657f59e26c132bef04"
                          createdAt: "2025-08-05T11:13:40.156Z"
                          updatedAt: "2025-08-05T13:04:25.958Z"
                        organizationName: "Suresh Crusher"
                        lastLogin: "2025-08-09T12:30:57.017Z"
                        isActive: true
        "400": { $ref: "#/components/responses/ValidationError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /api/auth/verify-token:
    get:
      tags: [Authentication]
      summary: Verify token
      responses:
        "200":
          description: Valid
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthSuccessResponse" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
  /api/auth/logout:
    post:
      tags: [Authentication]
      summary: Logout
      responses:
        "200":
          description: Logged out
          content:
            application/json:
              schema: { $ref: "#/components/schemas/StandardSuccess" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
  /api/auth/profile:
    get:
      tags: [Authentication]
      summary: Current profile
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthSuccessResponse" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
  /api/users/profile:
    get:
      tags: [Users]
      summary: Get user profile
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthSuccessResponse" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
    put:
      tags: [Users]
      summary: Update user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string }
                mobileNumber: { type: string }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthSuccessResponse" }
        "400": { $ref: "#/components/responses/ValidationError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
  /api/users:
    get:
      tags: [Users]
      summary: List users (owner)
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: limit
          schema: { type: integer }
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: role
          schema: { type: string, enum: [owner, user] }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UsersListResponse" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
  /api/users/{id}:
    get:
      tags: [Users]
      summary: Get user (owner)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/StandardSuccess" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
    delete:
      tags: [Users]
      summary: Delete user (owner)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            description: Deleted,
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/StandardSuccess" } },
              },
          }
        "400": { $ref: "#/components/responses/ValidationError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
  /api/users/{id}/status:
    put:
      tags: [Users]
      summary: Update status (owner)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [isActive]
              properties:
                isActive: { type: boolean }
      responses:
        "200":
          {
            description: Updated,
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/StandardSuccess" } },
              },
          }
        "400": { $ref: "#/components/responses/ValidationError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
  /api/truck-entries:
    get:
      tags: [Truck Entries]
      summary: List truck entries
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: limit
          schema: { type: integer }
      responses:
        "200":
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: "#/components/schemas/TruckEntryListResponse" },
                  },
              },
          }
        "400": { $ref: "#/components/responses/ValidationError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
    post:
      tags: [Truck Entries]
      summary: Create truck entry
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: "#/components/schemas/TruckEntryCreate"
                - type: object
                  properties:
                    truckImage: { type: string, format: binary }
      responses:
        "201":
          {
            description: Created,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: "#/components/schemas/TruckEntryCreateResponse" },
                  },
              },
          }
        "400": { $ref: "#/components/responses/ValidationError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
  /api/truck-entries/summary:
    get:
      tags: [Truck Entries]
      summary: Summary
      responses:
        "200":
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: "#/components/schemas/DashboardSummaryResponse" },
                  },
              },
          }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
  /api/truck-entries/{id}:
    get:
      tags: [Truck Entries]
      summary: Get truck entry
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: "#/components/schemas/TruckEntryDetailResponse" },
                  },
              },
          }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
    put:
      tags: [Truck Entries]
      summary: Update truck entry
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: { $ref: "#/components/schemas/TruckEntryCreate" }
      responses:
        "200":
          {
            description: Updated,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: "#/components/schemas/TruckEntryDetailResponse" },
                  },
              },
          }
        "400": { $ref: "#/components/responses/ValidationError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
    delete:
      tags: [Truck Entries]
      summary: Delete truck entry
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            description: Deleted,
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/StandardSuccess" } },
              },
          }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
  /api/material-rates:
    get:
      tags: [Material Rates]
      summary: List material rates
      responses:
        "200":
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: "#/components/schemas/MaterialRateListResponse" },
                  },
              },
          }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
    post:
      tags: [Material Rates]
      summary: Update rate (owner)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [materialType, rate]
              properties:
                materialType: { type: string }
                rate: { type: number }
      responses:
        "200":
          {
            description: Updated,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: "#/components/schemas/MaterialRateListResponse" },
                  },
              },
          }
        "400": { $ref: "#/components/responses/ValidationError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
  /api/material-types:
    get:
      tags: [Material Rates]
      summary: Get standard material types
      responses:
        "200":
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        allOf:
                          [
                            { $ref: "#/components/schemas/StandardSuccess" },
                            {
                              type: object,
                              properties:
                                {
                                  data:
                                    {
                                      type: object,
                                      properties:
                                        {
                                          materialTypes:
                                            {
                                              type: array,
                                              items: { type: string },
                                              example:
                                                [
                                                  '1 1/2" Metal',
                                                  '3/4" jalli',
                                                  '1/2" jalli',
                                                  '1/4" kuranai',
                                                  "Dust",
                                                  "Wetmix",
                                                  "Msand",
                                                  "Psand",
                                                ],
                                            },
                                        },
                                    },
                                },
                            },
                          ],
                      },
                  },
              },
          }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
  /api/config/app:
    get:
      tags: [Configuration]
      summary: App config
      responses:
        "200":
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema: { $ref: "#/components/schemas/ConfigAppResponse" },
                  },
              },
          }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
  /api/config/rates:
    get:
      tags: [Configuration]
      summary: Current rates
      parameters:
        - in: query
          name: units
          schema: { type: number }
      responses:
        "200":
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: "#/components/schemas/ConfigRatesResponse" },
                  },
              },
          }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
  /api/config/calculate:
    post:
      tags: [Configuration]
      summary: Calculate total
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [units, ratePerUnit]
              properties:
                units: { type: number }
                ratePerUnit: { type: number }
                materialType: { type: string }
      responses:
        "200":
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: "#/components/schemas/ConfigCalculateResponse" },
                  },
              },
          }
        "400": { $ref: "#/components/responses/ValidationError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
  /api/config/validate:
    post:
      tags: [Configuration]
      summary: Validate truck entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [truckNumber, entryType, units, ratePerUnit]
              properties:
                truckNumber: { type: string }
                entryType: { type: string }
                materialType: { type: string }
                units: { type: number }
                ratePerUnit: { type: number }
      responses:
        "200":
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: "#/components/schemas/ConfigValidateResponse" },
                  },
              },
          }
        "400": { $ref: "#/components/responses/ValidationError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
  /api/expenses:
    get:
      tags: [Other Expenses]
      summary: List other expenses
      responses:
        "200":
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: "#/components/schemas/OtherExpenseListResponse" },
                  },
              },
          }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
    post:
      tags: [Other Expenses]
      summary: Create other expense
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [expensesName, amount, date]
              properties:
                expensesName: { type: string }
                amount: { type: number }
                others: { type: string }
                notes: { type: string }
                date: { type: string, format: date }
      responses:
        "201":
          {
            description: Created,
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        $ref: "#/components/schemas/OtherExpenseDetailResponse",
                      },
                  },
              },
          }
        "400": { $ref: "#/components/responses/ValidationError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
  /api/expenses/summary:
    get:
      tags: [Other Expenses]
      summary: Expense summary
      responses:
        "200":
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        $ref: "#/components/schemas/OtherExpenseSummaryResponse",
                      },
                  },
              },
          }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
  /api/expenses/{id}:
    get:
      tags: [Other Expenses]
      summary: Get other expense
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        $ref: "#/components/schemas/OtherExpenseDetailResponse",
                      },
                  },
              },
          }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
    put:
      tags: [Other Expenses]
      summary: Update other expense
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                expensesName: { type: string }
                amount: { type: number }
                others: { type: string }
                notes: { type: string }
                date: { type: string, format: date }
      responses:
        "200":
          {
            description: Updated,
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        $ref: "#/components/schemas/OtherExpenseDetailResponse",
                      },
                  },
              },
          }
        "400": { $ref: "#/components/responses/ValidationError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
    delete:
      tags: [Other Expenses]
      summary: Delete other expense
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            description: Deleted,
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/StandardSuccess" } },
              },
          }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
  /api/reports/templates:
    get:
      tags: [Reports]
      summary: Report templates
      responses:
        "200":
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: "#/components/schemas/ReportTemplatesResponse" },
                  },
              },
          }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
  /api/reports/data:
    get:
      tags: [Reports]
      summary: Report data
      parameters:
        - in: query
          name: reportType
          schema: { type: string }
      responses:
        "200":
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema: { $ref: "#/components/schemas/ReportDataResponse" },
                  },
              },
          }
        "400": { $ref: "#/components/responses/ValidationError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
  /api/reports/export:
    post:
      tags: [Reports]
      summary: Generate export
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [reportType, format]
              properties:
                reportType: { type: string }
                format: { type: string, enum: [PDF, Excel, CSV] }
      responses:
        "200":
          {
            description: Generated,
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        $ref: "#/components/schemas/ReportExportTokenResponse",
                      },
                  },
              },
          }
        "400": { $ref: "#/components/responses/ValidationError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
    get:
      tags: [Reports]
      summary: Generate export via GET
      parameters:
        - in: query
          name: reportType
          schema: { type: string }
        - in: query
          name: format
          schema: { type: string }
      responses:
        "200":
          {
            description: Generated,
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        $ref: "#/components/schemas/ReportExportTokenResponse",
                      },
                  },
              },
          }
        "400": { $ref: "#/components/responses/ValidationError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
  /api/reports/browser-download:
    post:
      tags: [Reports]
      summary: Browser download token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [reportType, format]
              properties:
                reportType: { type: string }
                format: { type: string }
      responses:
        "200":
          {
            description: Token issued,
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        $ref: "#/components/schemas/ReportExportTokenResponse",
                      },
                  },
              },
          }
        "400": { $ref: "#/components/responses/ValidationError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
  /api/reports/download/{token}:
    get:
      tags: [Reports]
      summary: Download report
      parameters:
        - in: path
          name: token
          required: true
          schema: { type: string }
      responses:
        "200": { description: File }
        "404": { $ref: "#/components/responses/NotFoundError" }
  /api/reports/test-data:
    get:
      tags: [Reports]
      summary: Test DB data
      responses:
        "200":
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/StandardSuccess" } },
              },
          }
  /api/organizations:
    get:
      tags: [Organizations]
      summary: List organizations
      responses:
        "200":
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/StandardSuccess" } },
              },
          }
    post:
      tags: [Organizations]
      summary: Create organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
      responses:
        "201":
          {
            description: Created,
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/StandardSuccess" } },
              },
          }
        "400": { $ref: "#/components/responses/ValidationError" }
        "409": { $ref: "#/components/responses/ValidationError" }
