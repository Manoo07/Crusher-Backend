version: "3.8"

services:
  # Application service
  crusher-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: crusher-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/crusher_backend
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - CORS_ORIGIN=*
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - crusher-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
          "||",
          "exit",
          "1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database service
  postgres:
    image: postgres:15-alpine
    container_name: crusher-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: crusher_backend
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - crusher-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d crusher_backend"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: crusher-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - crusher-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  crusher-network:
    driver: bridge
