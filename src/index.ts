import cors from "cors";
import dotenv from "dotenv";
import express, { NextFunction, Request, Response } from "express";
import { ErrorMiddleware } from "./middlewares/error";
import { apiRoutes } from "./routes";
import DatabaseConnection from "./utils/database";

// Load environment variables
dotenv.config();

// Initialize Express app
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(
  cors({
    origin: process.env.CORS_ORIGIN || "http://localhost:3000",
    credentials: true,
  })
);
app.use(express.json({ limit: "10mb" }));
app.use(express.urlencoded({ extended: true }));

// Request logging middleware (development only)
if (process.env.NODE_ENV === "development") {
  app.use((req: Request, res: Response, next: NextFunction) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
    next();
  });
}

// API Routes
app.use("/api", apiRoutes);

// Root endpoint
app.get("/", (req: Request, res: Response) => {
  res.json({
    success: true,
    message: "Crusher Backend API",
    version: "1.0.0",
    documentation: "/api/health",
    timestamp: new Date().toISOString(),
  });
});

// Error handling middleware
app.use(ErrorMiddleware.handleErrors);

// 404 handler (must be last)
app.use(ErrorMiddleware.notFound);

// Graceful shutdown
const gracefulShutdown = async (signal: string) => {
  console.log(`\nReceived ${signal}. Shutting down gracefully...`);

  try {
    await DatabaseConnection.disconnect();
    console.log("Database disconnected");
    process.exit(0);
  } catch (error) {
    console.error("Error during shutdown:", error);
    process.exit(1);
  }
};

process.on("SIGINT", () => gracefulShutdown("SIGINT"));
process.on("SIGTERM", () => gracefulShutdown("SIGTERM"));

// Start server
const server = app.listen(PORT, () => {
  console.log(`üöÄ Server is running on port ${PORT}`);
  console.log(`üìä Environment: ${process.env.NODE_ENV || "development"}`);
  console.log(`üìä API Base URL: http://localhost:${PORT}/api`);
  console.log(`üìä Health Check: http://localhost:${PORT}/api/health`);
  console.log(
    `üîß Database: ${process.env.DATABASE_URL ? "Connected" : "Not configured"}`
  );

  if (process.env.NODE_ENV === "development") {
    console.log(`üêõ Development mode - Enhanced logging enabled`);
    if (process.env.SKIP_AUTH === "true") {
      console.log(`‚ö†Ô∏è  Authentication bypassed for development`);
    }
  }
});

// Handle server errors
server.on("error", (error: any) => {
  if (error.code === "EADDRINUSE") {
    console.error(`‚ùå Port ${PORT} is already in use`);
  } else {
    console.error("‚ùå Server error:", error);
  }
  process.exit(1);
});

export default app;
